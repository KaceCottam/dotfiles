#!/usr/bin/env bash

function school() {
  if [ $# -eq 0 ]; then
    cd ~/Documents/School;
    ls;
    return 0;
  fi

  folders=($(ls -p --color=never ~/Documents/School | grep --color=never --ignore-case "$@"))
  
  if (( ${#folders[@]} == 0 )); then
    echo "Folder not found."
    ls ~/Documents/School
    return 1
  fi

  index=0
  if (( ${#folders[@]} > 1 )); then
    for i in ${!folders[@]}; do
      printf "%d\t%s\n" "$i" "${folders[$i]}"
    done
    read -p "Which folder: " index
  fi

  if (( ${index} < 0 || ${index} >= ${#folders[@]})); then
    echo "Bad index..."
    return 1
  fi

  cd ~/Documents/School/${folders[${index}]};
  ls;
}

function dev() {
  if [ $# -eq 0 ]; then
    cd ~/Dev;
    ls;
    return 0;
  fi

  folders=($(ls -p --color=never ~/Dev | grep --color=never --ignore-case "$@"))
  
  if (( ${#folders[@]} == 0 )); then
    echo "Folder not found."
    ls ~/Documents/School
    return 1
  fi

  index=0
  if (( ${#folders[@]} > 1 )); then
    for i in ${!folders[@]}; do
      printf "%d\t%s\n" "$i" "${folders[$i]}"
    done
    read -p "Which folder: " index
  fi

  if (( ${index} < 0 || ${index} >= ${#folders[@]})); then
    echo "Bad index..."
    return 1
  fi

  cd ~/Dev/${folders[${index}]};
  ls;
}

function book() {
  if [ $# -eq 0 ]; then
    cd ~/Documents/Books/;
    ls;
    return 0;
  fi

  books=($(ls -p --color=never ~/Documents/Books/* | grep --color=never --ignore-case "$@"))
  
  if (( ${#books[@]} == 0 )); then
    echo "Book not found."
    return 1
  fi

  index=0
  if (( ${#books[@]} > 1 )); then
    for i in ${!books[@]}; do
      printf "%d\t%s\n" "$i" "${books[$i]}"
    done
    read -p "Which book: " index
  fi

  if (( ${index} < 0 || ${index} >= ${#books[@]})); then
    echo "Bad index..."
    return 1
  fi

  open ${books[${index}]}
}

function mkd() {
	mkdir -p "$@" && cd "$_";
}

function math() {
  if [ $# -eq 0 ]; then
    echo "Running matlab in nodesktop mode.";
    matlab -nodesktop;
  else
    echo "Running matlab for command: $*";
    matlab -batch "$*";
  fi;
}

function g() {
  git $*;
  if [ "$1" != "status" ]; then
    git status -s;
  fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
